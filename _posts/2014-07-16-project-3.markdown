---
layout: default
modal-id: 3
title: Sawyer the Tic Tac Toe Master
short-caption: Tic Tac Toe Master
date: 2020-01-04
img: tictactoe.gif
alt: image-alt
project-date: December 2019
client: Start Bootstrap
category: Rethink Sawyer Arm, ROS, Hybrid Force Control, Tic-Tac-Toe Perfect Game Strategy
description: <br><br><p>The Tic Tac Toe artist is a Sawyer robot based interactive robot Tic Tac Toe player. This project allows a human to play a game of Tic Tac Toe against the Sawyer robot on a dry-erase board. We programmed the robot arm to execute three objectives, read the current board state, compute its next optimal move, and perform the trajectory needed to draw an X in that board space. At the current stage of development, the robot goes first and uses <a href="https,//www.wikihow.com/Win-at-Tic-Tac-Toe">the perfect Tic Tac Toe strategy</a>, making it nearly impossible to win against the robot. This level of brutality will be neutralized in future work.</p><br><br><h4>Project Setup </h4><p> Equipment<ul> <li>Sawyer arm</li> <li>Handheld dry-erase board (with electrical tape as the board lines and a 2cmx2cm brightly-colored piece of tape placed at the top left corner of the top left board space)</li> <li>2 Dry-erase markers</li><li>Eraser</li><li>2 Clamps</li><li>Table</li></ul></p><br><br><img src="https://user-images.githubusercontent.com/39393023/70825660-90404b80-1daa-11ea-80b3-6a5e40704f1a.png" alt="Log Yard" width="300"><br><br><h4>Hybrid Motion-Force Control</h4><p>When the robot needs to draw, the force controller reads the vertical direction force, i.e, along the z axis, and issue the desired end-effector z position. Therefore, The force control problem is converted to a position control problem, and the force controller can always make sure the pen (attached to end-effector gripper) is is in contact with the board. Desired position along the z axis (axis that is perpendicular to the board) is set by using a simple P controller as, z_position = -K*Force</p><br><br><p>When the robot needs to lose contact with the board, desired z position is set 1.5 cm above the current end effector position. When the robot needs to move in the air, desired z position is set to the current end effector position. After the desired z position is found, it is used in combination with the desired (x,y) position obtained from the <a href="https,//github.com/RicoJia/final-project-tic-tac-toe">Trajectory Generator </a>given as an input to the built in inverse kinematic function of the Sawyer robot.</p><br><br><h4>Trajectory Generation</h4> <p>This part encompasses all motions of the robot except drawing using force control. Along the entire trajectory there should not be any jerks or unsafe moves. The motions of the robot are illustrated in the state machine diagram below</p> <br><img src="https://user-images.githubusercontent.com/39393023/72284971-cf5ef800-3607-11ea-979e-440ab09f15f5.png" alt="Log Yard" width="750"><br><br><p><b>How the state machine works</b><br>The robot starts off at a pre-configured camera position in idle mode. When AI sends the position of the center of a new cross, the robot will move to the Write Standoff Position, which is the pre-configured center position. Afterwards, the robot will generate a trajectory of the cross and move to the first point of the trajectory. When the robot finishes drawing the cross, it will go back to the camera position.</p> <br><br><p> For more information, especially about computer vision and AI of this project, come check out my <a href="https://github.com/RicoJia/final-project-tic-tac-toe">Github Repo</a>, check out the video below, <a href="index.html">or shoot me a message!</a></p> <br><br><p><center><iframe width="560" height="315" src="https://www.youtube.com/embed/J4vcd4qHMO0" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center></p>
---
